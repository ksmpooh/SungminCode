library(randomForest)
(rf <- randomForest(factor(gear) ~ ., data = train, ntree = 250))
install.packages("randomForest")
library(randomForest)
(rf <- randomForest(factor(gear) ~ ., data = train, ntree = 250))
table(test$gear, predict(rf, test))
plot(rf)
legend('topright', colnames(rf$err.rate), col = 1:4, fill = 1:4, bty = 'n')
(cm <- ---(
train = subset(train, select = -Species),
test  = subset(test, select = -Species),
cl    = train$Species,
k     = 3))
table(---, cm)
library(class)
data(iris)
idxs <- sample(1:nrow(iris),as.integer(0.7*nrow(iris)))
train <- iris[idxs,]
test <- iris[-idxs,]
(cm <- ---(
train = subset(train, select = -Species),
test  = subset(test, select = -Species),
cl    = train$Species,
k     = 3))
table(---, cm)
library(class)
data(iris)
idxs <- sample(1:nrow(iris),as.integer(0.7*nrow(iris)))
train <- iris[idxs,]
test <- iris[-idxs,]
(cm <- knn(
train = subset(train, select = -Species),
test  = subset(test, select = -Species),
cl    = train$Species,
k     = 3))
library(rpart)
fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)
fit2 <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis,
parms = list(prior = c(.65,.35), split = "information"))
fit3 <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis,
control = rpart.control(cp = 0.05))
par(mfrow = c(1,2), xpd = NA) # otherwise on some devices the text is clipped
plot(fit)
text(fit, use.n = TRUE)
plot(fit2)
text(fit2, use.n = TRUE)
library(qqman)
qqman::gwasResults
head(gwasResults)
manhattan(gwasResults)
manhattan(gwasResults,chr = chr)
colnames(gwasResults)
manhattan(gwasResults,chr = CHR,bp = BP,col = c("Blue,red"))
manhattan(gwasResults,chr = "CHR",bp = "BP",col = c("Blue,red"))
manhattan(gwasResults,chr = "CHR",bp = "BP",col = c("blue,red"))
manhattan(gwasResults,chr = "CHR",bp = "BP",col = c("blue","red"))
manhattan(gwasResults,chr = "CHR",bp = "BP",col = c("blue","red"),annotateTop = T)
manhattan(gwasResults,chr = "CHR",bp = "BP",col = c("blue","red"))
manhattan(gwasResults,chr = "CHR",bp = "BP",col = c("blue","red"))
))
colnames(gwasResults)
manhattan(gwasResults,chr = "CHR",bp = "BP",col = c("blue","red"))
manhattan(gwasResults,chr = "CHR",bp = "BP",col = c("blue","red"),annotatePval = T)
manhattan(gwasResults,chr = "CHR",bp = "BP",col = c("blue","red"),annotatePval = T,annotateTop = T)
a <- manhattan(gwasResults,chr = "CHR",bp = "BP",col = c("blue","red"))
a
manhattan(gwasResults,chr = "CHR",bp = "BP",col = c("blue","red"))
a<-iris
a
b<-mtcars
b
b<-lm(a$Species,data = a)
?lm
b<-lm(a$Species~a)
b<-lm(pecies~a)
b<-lm(Species~a)
b<-lm(species~a)
a <- read.table("../Downloads/Summary.xlsx")
library(RODBC)
library(RODBC)
a <- read.table("../Downloads/Summary.xlsx")
a <- read.table("../Downloads/Summary.csv")
a <- read.table("../Downloads/Summary.csv",header = T)
a <- read.table("../Downloads/Summary.csv",header = T)
View(a)
a <- read.csv("../Downloads/Summary.csv",header = T)
View(a)
summary(a)
summary(a)
intersect(a$apt_geno_qc_gender,a$apt_probeset_genotype_gender)
length(intersect(a$apt_geno_qc_gender,a$apt_probeset_genotype_gender))
a <-    1
a
a = 1
a
a <- "1"
a
a = "1"
a
a = iris
a
a = iris
a
a <-data("mtcars")
a
a <- mtcars
mtcars
hist(mtcars)
hist(mtcars$mpg)
par(mfrow = c(1,2))
hist(mtcars$mpg)
d<-density(mtcars$wt)
plot(d)
View(d)
d
mtcars
?density
d
heatmap(mtcars$mpg)
library(venn)
library(venn)
a <- rep(1:10)
b <-rep(4:14)
c <-as.data.frame(a,b)
c <- rep(1:20)
d <- cbind(a,b)
View(d)
d <- cbind(a,b,c)
d <- merge.data.frame(a,b,c)
d <- merge.data.frame(a,b)
d
a >5
a <-a >5
b <-rep(4:14)
b <- b>10
c <- rep(1:20)
c <- c>10
d <- data.frame(a,b,c)
b <-rep(5:14)
b <- b>10
c <- rep(3:12)
c <- c>10
d <- data.frame(a,b,c)
venn(d)
View(d)
?subset()
help(rep)
?rep()
library(qqman)
??manhattan
manhattan()
help(manhattan)
help(plot)
helscale())
help(scale)
help(plot)
help(scale)
manhattan(gwasResults)
manhattan(gwasResults,ymax = 10)
manhattan(gwasResults,ymax = c(10)
manhattan(gwasResults,ymax = c(10))
manhattan(gwasResults,ymax = c(10))
manhattan(gwasResults,ymax = c(10))
dev.off()
manhattan(gwasResults,ymax = c(10))
warnings()
manhattan(gwasResults,ylim = c(0,10)
manhattan(gwasResults,ylim = c(0,10))
manhattan(gwasResults,ylim = c(0,10))
dev.off()
manhattan(gwasResults,ylim = c(0,10))
manhattan(gwasResults,ylim = c(0,10),genomewideline = c(10))
manhattan(gwasResults,ylim = c(0,10),genomewideline = c(10),suggestiveline = F)
manhattan(gwasResults,ylim = c(0,10),
genomewideline = c(10))
manhattan(gwasResults,ylim = c(0,10),
genomewideline = c(10),
suggestiveline = T,
ylim = c(0,20)
)
manhattan(gwasResults,ylim = c(0,10),
genomewideline = c(10),
suggestiveline = T,
ylim = c(0,20)
)
dev.off()
manhattan(gwasResults,ylim = c(0,10),
genomewideline = c(10),
suggestiveline = T,
ylim = c(0,20)
)
manhattan(gwasResults,ylim = c(0,10),
genomewideline = c(10),
suggestiveline = T,
ylim = c(0,19)
)
manhattan(gwasResults,ylim = c(0,10),
genomewideline = c(10),
suggestiveline = T,
ylim = c(0,10)
)
manhattan(gwasResults,ylim = c(0,10), +
genomewideline = c(10), +
suggestiveline = T, +
ylim = c(0,10)
)
manhattan(gwasResults,ylim = c(0,10), +
genomewideline = c(10), +
suggestiveline = T, +
ylim = c(0,10)
)
dev.off()
manhattan(gwasResults,ylim = c(0,10), +
genomewideline = 10, +
suggestiveline = T, +
ylim = c(0,10)
)
manhattan(gwasResults,ylim = c(0,10), +
genomewideline = 10, +
#suggestiveline = T, +
ylim = c(0,10)
)
manhattan(gwasResults,ylim = c(0,10), +
genomewideline = c(10), +
#suggestiveline = T, +
ylim = c(0,10)      )
manhattan(gwasResults,ylim = c(0,10), +
genomewideline = c(10), +
#suggestiveline = T, +
ylim = c(0,10))
dev.off()
manhattan(gwasResults,ylim = c(0,10), +
genomewideline = c(10), +
#suggestiveline = T, +
#ylim = c(0,10)
)
manhattan(gwasResults,ylim = c(0,10), +
genomewideline = c(10), +
#suggestiveline = T, +
#ylim = c(0,10)
)
manhattan(gwasResults, +
genomewideline = c(10), +
#suggestiveline = T, +
ylim = c(0,10)
)
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T, +
ylim = c(0,10)
)
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T, +
ylim = c(0,20)
)
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T,
cex = 10
ylim = c(0,20)
)
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T,
cex = 10
ylim = c(0,20)
)
dev.off()
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T,
cex = 10,
ylim = c(0,20)
)
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T,
cex = 1,
ylim = c(0,20)
)
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T,
cex = 1.5,
ylim = c(0,20)
)
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T,
cex = 0.5,
ylim = c(0,20)
)
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T,
cex = 1,
ylim = c(0,20)
)
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T,
#cex = 1,
ylim = c(0,20)
)
dev.off()
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T,
#cex = 1,
ylim = c(0,20)
)
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T,
cex = 0.5,
ylim = c(0,20)
)
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T,
cex = 0.5,
cex.axis = 1.5,
ylim = c(0,20)
)
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T,
cex = 0.5,
cex.axis = 1,
ylim = c(0,20)
)
save(df,"C:/Users/user/Desktop/1.Rdata")
save(df,file = "C:/Users/user/Desktop/1.Rdata")
load("C:/Users/user/Desktop/1.Rdata")
hi
print(hi)
print(dfd)
print(df)
df
df
df$bm <- h/w
df$bm <- df$h/df$w
df
ls()
ls()
sohee
df
x <- c(1,3,3+5i)
x
weight <- c(60,72,57,90,95,72)
height <- c(1.62,1.89,1.70,1.62,1.89,1.77)
c
height
weight/height^2
weight <-  c(weight, 90)
weight
height
weight/height^2
weight/height^2
weight/height^2
length(height)
length(weight)
min(weight)
max(weight)
range(weight(
))
range(weight)
range(weight)[2]
summary(weight)
a
a <-c(90,22,1)
range(a)
var(weight)
sd(weight)
height <- c(height,1.9)
length(weight)
cor(weight, height)
cor(weight, height)
x
x
x
x  <- c(11,12,13,14,99,16,17,18,19,20)
x
x > 15
which(x<15)
eixt
exit
q()
# 실습에 배울 요소들 총합
y <- 1:5
##### 1) plot type : type
par( mfrow=c(3, 3) )
##### 1) plot type : type
par( mfrow=c(3, 3) )
plot(y, type='p', main="type='p'" )
plot(y, type='l', main="type='l'" )
plot(y, type='b', main="type='b'" )
plot(y, type='c', main="type='c'" )
plot(y, type='o', main="type='o'" )
plot(y, type='h', main="type='h'" )
plot(y, type='s', main="type='s'" )
plot(y, type='S', main="type='S'" )
plot(y, type='n', main="type='n'" )
##### 2) line type : lty
graphics.off()
par( mfrow=c(2, 3) )
plot(y, type='o', lty=1, main=paste("lty=",1, sep='') )
plot(y, type='o', lty=2, main=paste("lty=",2, sep='') )
plot(y, type='o', lty=3, main=paste("lty=",3, sep='') )
plot(y, type='o', lty=4, main=paste("lty=",4, sep='') )
plot(y, type='o', lty=5, main=paste("lty=",5, sep='') )
plot(y, type='o', lty=6, main=paste("lty=",6, sep='') )
colors()
cars <- data.frame(standard = c(1,3,6,4,9),truck = c( 2,5,4,5,12),suv =c(4,5,6,6,16))
cars
rownames(cars) <- c("mon","tue","wed","the","Fri")
cars
# plot(cars)
# 차종별로 각각 그려보기
par( mfrow=c(1, 3) )
plot( cars$standard, type="o")
plot( cars$truck, type="o")
plot( cars$suv, type="o")
# Dataset 만들기
cars <- data.frame(
standard=c(1, 3, 6, 4, 9),
truck=c(2, 5, 4, 5, 12),
suv=c(4, 4, 6, 6, 16) )
rownames(cars) <- c("Mon", "Tue", "Wed", "Thu", "Fri")
cars
# plot(cars)
# 차종별로 각각 그려보기
par( mfrow=c(1, 3) )
plot( cars$standard, type="o")
plot( cars$truck, type="o")
plot( cars$suv, type="o")
##### 번외 : color 지정 방법 4가지
par(mfrow = c(1,4))
# 1) 숫자 (0-8까지만 가능)
plot(y, col=6, cex = 2, pch = 19)
# 2) color name
plot(y, col="red", cex = 2, pch = 19)
# 3) 16진법 표기
plot(y, col="#a8259f", cex = 2, pch = 19)
# 4) RGB 표기
rgb <- rgb(168,37,159, maxColorValue=255)
plot(y, col=rgb, cex = 2, pch = 19)
# col에 변수를 할당해서 알록달록 그리기 (반복 색할당)
rgb <- c("red","green","blue")
plot(y, col=rgb, cex = 2, pch = 19)
# Dataset 만들기
cars <- data.frame(
standard=c(1, 3, 6, 4, 9),
truck=c(2, 5, 4, 5, 12),
suv=c(4, 4, 6, 6, 16) )
rownames(cars) <- c("Mon", "Tue", "Wed", "Thu", "Fri")
cars
# plot(cars)
# 차종별로 각각 그려보기
par( mfrow=c(1, 3) )
plot( cars$standard, type="o")
plot( cars$truck, type="o")
plot( cars$suv, type="o")
plot( cars$standard, type="o", col="blue", ylim=c(0, max_y), axes=FALSE, ann=FALSE )
# 축을 그리자 : axis(), box() 함수
axis(1, at=1:5, lab=rownames(cars) )    # axis 1 x축 / 2 y축
# 축을 그리자 : axis(), box() 함수
axis(1, at=1:5, lab=rownames(cars) )    # axis 1 x축 / 2 y축
max_y <- max(cars)
max_y
axis(2, at=seq(0, max_y, by=4), las=1 ) # las = 1 가로 / las = 2 세로
box()
# 축을 그리자 : axis(), box() 함수
axis(1, at=1:5, lab=rownames(cars) )    # axis 1 x축 / 2 y축
# 축을 그리자 : axis(), box() 함수
axis(1, at=1:5, lab=rownames(cars) )    # axis 1 x축 / 2 y축
max_y <- max(cars)
max_y
axis(2, at=seq(0, max_y, by=4), las=1 ) # las = 1 가로 / las = 2 세로
box()
# 빈 plot부터 요소를 하나씩 그려보자
par( mfrow=c(1, 1) )
plot( cars$standard, type="o", col="blue", ylim=c(0, max_y), axes=FALSE, ann=FALSE )
plot( cars$standard, type="o", col="blue", ylim=c(0, max_y))
# 축을 그리자 : axis(), box() 함수
axis(1, at=1:5, lab=rownames(cars) )    # axis 1 x축 / 2 y축
max_y
max_y <- max(cars)
axis(2, at=seq(0, max_y, by=4), las=1 ) # las = 1 가로 / las = 2 세로
box()
version()
version
if(!requireNamespace("BiocManager",quitely = TRUE))
install.packages("BiocManager")
BiocManager::install("affy")
BiocManager::install("hgu113a.db")
BiocManager::install("hgu113a.db")
BiocManager::install("hgu133plus2.db")
BiocManager::install("samr")
install.packages("nlme")
BiocManager::install("hgu113a.db")
library(hgu133plus2.db)
library(samr)
setwd("c:/Users/user/git/SungminCode/snubi/R_MicroArray01/")
no <- as.matrix(read.table("microarray2.txt",header = TRUE,sep = '\t'))
dim(no0)
dim(no)
head(no)
##charactor to integer
#mode(no) <- "numeric"
mode(no)
