manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T, +
ylim = c(0,10)
)
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T, +
ylim = c(0,20)
)
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T,
cex = 10
ylim = c(0,20)
)
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T,
cex = 10
ylim = c(0,20)
)
dev.off()
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T,
cex = 10,
ylim = c(0,20)
)
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T,
cex = 1,
ylim = c(0,20)
)
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T,
cex = 1.5,
ylim = c(0,20)
)
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T,
cex = 0.5,
ylim = c(0,20)
)
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T,
cex = 1,
ylim = c(0,20)
)
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T,
#cex = 1,
ylim = c(0,20)
)
dev.off()
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T,
#cex = 1,
ylim = c(0,20)
)
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T,
cex = 0.5,
ylim = c(0,20)
)
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T,
cex = 0.5,
cex.axis = 1.5,
ylim = c(0,20)
)
manhattan(gwasResults,
genomewideline = c(10),
#suggestiveline = T,
cex = 0.5,
cex.axis = 1,
ylim = c(0,20)
)
save(df,"C:/Users/user/Desktop/1.Rdata")
save(df,file = "C:/Users/user/Desktop/1.Rdata")
load("C:/Users/user/Desktop/1.Rdata")
hi
print(hi)
print(dfd)
print(df)
df
df
df$bm <- h/w
df$bm <- df$h/df$w
df
ls()
ls()
sohee
df
x <- c(1,3,3+5i)
x
weight <- c(60,72,57,90,95,72)
height <- c(1.62,1.89,1.70,1.62,1.89,1.77)
c
height
weight/height^2
weight <-  c(weight, 90)
weight
height
weight/height^2
weight/height^2
weight/height^2
length(height)
length(weight)
min(weight)
max(weight)
range(weight(
))
range(weight)
range(weight)[2]
summary(weight)
a
a <-c(90,22,1)
range(a)
var(weight)
sd(weight)
height <- c(height,1.9)
length(weight)
cor(weight, height)
cor(weight, height)
x
x
x
x  <- c(11,12,13,14,99,16,17,18,19,20)
x
x > 15
which(x<15)
eixt
exit
q()
Pima.tr
pima.tr
library(MASS)
MASS
?MASS
??MASS
attach(Pima.tr)
head(Pima.te)
head(Pima.tr)
shapiro.test(bmi)
str(Pima.tr)
qqnorm(bmi)
abline(x = 1)
qqline(bmi)
qqnorm(bmi)
qqline(bmi)
qqline(bmi)
#onesample t-test
t.test(bmi,mu = 30)
t.test()
??t.test()
??t.test
#onesample t-test
t.test(bmi,mu = 30)
bmit.ttest <- t.test(bbmit, mu =30)
bmit.ttest <- t.test(bmi,mu = 30)
bmi.ttest <- t.test(bmi,mu = 30)
names(bmi.ttest)
bmi.ttest
library(MASS)
attach(Pima.tr)
head(Pima.tr)
str(Pima.tr)
shapiro.test(bmi) ## 정규성 검증할때 사용하는기본 함수 0.05보다 클경우 정규성을 뛴다.
qqnorm(bmi)
qqline(bmi)
#onesample t-test
t.test(bmi,mu = 30) #평균값이 30이아니다 라는것을 채택할수있다.
bmi.ttest <- t.test(bmi,mu = 30)
names(bmi.ttest)
bmi.ttest$statistic
bmi.ttest$p.value
t.test(bmi,mu = 30, alternative = "greater")
t.test(bmi,mu = 30, alternative = "greater") # 단측검증
#two sample t-test  ..t test는 주로 2개를 하고 분산을 테스트(검증)
#등분산 검증
var.test(bmi ~ type)
head(Pima.tr)
#two sample t-test  ..t test는 주로 2개를 하고 분산을 테스트(검증)
#등분산 검증
var.test(bmi ~ type)
t.test(bmi ~type)
attach(anorexia)
FT <- subset(anorexia,Treat == "FT")
head(FT)
shapiro.test(FT)
shapiro.test(FT$Prestwt - FT$Postwt)
shapiro.test(FT$Prewt - FT$Postwt)
t.test(FT$Prewt, FT$Postwt, paired = TRUE)
CBT <- subset(anorexia,Treat == "CBT")
head(CBT)
shapiro.test(CBT)
shapiro.test(CBT$Prewt - CBT$Postwt)
wilcox.test(CBT$Prewt,CBT$Postwt,paired = TRUE)
wilcox.test(CBT$Prewt,CBT$Postwt,paired = TRUE,exact = FALSE)
placebo < c(7,5,6,4,12)
placebo <- c(7,5,6,4,12)
new_drug <- c(3,6,4,2,1)
wilcox.test(placebo,new_drug, exact = FALSE)
attach(iris)
cor(Sepal.Length,Petal.Width)
head(iris)
cor(Sepal.Length,Petal.Width)
cor.test(Sepal.Length,Petal.Width)
a <- cor.test(Sepal.Length,Petal.Width)
a
a$statistic
cor.test(Sepal.Length,Petal.Width)
cor(iris[1,1:4])
cor(iris[,1:4])
pairs(iris[,1:4])
install.packages("Hmsic")
Hmsic
Hmsic
Hmsic::
install.packages("Hmsic")
library(Hmsic)
library(Hmsic)
install.packages("BiocManager")
BiocManager::install("Hmcis")
iris.na.test <- iris[,1:4]
iris.na.test[1,1] <- NA
iris.na.test[1,1] <- NA
iris.na.test[3,2] <- NA
iris.na.test[4,3] <- NA
head(iris.na.test)
cor(iris.na.test,use = "parewise.complete.obs")
cor(iris.na.test,use = "pairewise.complete.obs")
cor(iris.na.test,use = "pairewise.complete.obs")
cor(iris.na.test , use = "pairwise.complete.obs")
doctorA <- c(4,1,3,2,6,5,8,7)
doctorA <- c(4,1,3,2,6,5,8,7)
doctorB <- c(5,3,1,2,6,4,7,8)
cor.test(doctorA,doctorB,method = "spearman")
newTest <-  c()50,55,60,65,70,75,80,85,90,95,100)
standardTest <- c(61,61,59,71,80,76,90,106,98,100,114)
dat <- data.frame(newTest, standardTest)
newTest <-  c(50,55,60,65,70,75,80,85,90,95,100)
standardTest <- c(61,61,59,71,80,76,90,106,98,100,114)
dat <- data.frame(newTest, standardTest)
plot(standardTest ~newTest, data = dat, xlim = c(0,110), ylim = c(0,120))
dat.lm <- lm(standardTest~newTest, data= dat)
summary(dat.lm)
coef(dat.lm)
predict(dat.lm,newdata = data.frame(newTest = 80))
install.packages("lmtest")
library(lmtest)
dwtest(standardTest ~ newTest, data = dat)
setwd("C:/Users/user/git/SungminCode/snubi/")
source('C:/Users/user/git/SungminCode/snubi/starting4.R', echo=TRUE)
library(MASS)
chisq.test(c(24,16),p = c(0.7,0.3))
countTable <- matrix(c(10845,189,10933,104),nrow = 2, byrow = TRUE)
countTable
rownames(countTable) <- c("Placebo","Aspirin")
colnames(countTable)<- c("No heart Attack","Heart Attack")
dimI(countTable)
dim(countTable)
chisq.test(countTable)
chisq.test(countTable)$expected
chisq.test(countTable)
chisq.test(countTable)$expected
str(birthwt)
### 독립성 검정 예시2
str(birthwt)
birthwt$smoke <- factor(birthwt$smoke,label = c("Non Smoker","Smoker"))
birthwt$low <-  factor(birthwt$low,label = c("No","Yes") )
smoke_low_tb <- table(birthwt$smoke,birthwt$low)
smoke_low_tb
chisq.test(smoke_low_tb)
TeaTasing <- matrix(c(3,1,1,3), nrow = 2)
colnames(TeaTasing) < - c("true_Milk","true_Tea")
colnames(TeaTasing) <- c("true_Milk","true_Tea")
rownames(TeaTasing) <-c("pred_Milk","pred_Tea")
chisq.test(TeaTasing)
chisq.test(TeaTasing)$expected
fisher.test(TeaTasing)
prop.trend.test(c(13,7,21),c(42,14,28))
c(13,7,21),c(42,14,28)
c(13,7,21)/c(42,14,28)
prop.trend.test(c(13,10,10),c(42,14,28))
c(13,10,10)/c(42,14,28)
chisq.test(matrix(c(13,29,10,4,10,18),ncol = 3))
AD = matrix(c(5,15,5,7),ncol = 2)
colnames(AD) <- c("A_AfterAD","B_AfterAD")
mcnemar.test(AD)
rownames(AD) <- c("A,B")
rownames(AD) <- c("A","B")
mcnemar.test(AD)
## ANOVA  3개 이상의 변수들의 연속형에 대해서 평균 비교하는 것
# one-way Anova
attach(anorexia)
str(anorexia)
change <- Postwt - Prewt
boxplot(change~Treat,col = rainbow(3))
aov.out <- aov(change~Treat)
summary(aov.out)
# 사후 검정 (post -hoc analysis)
TukeyHSD(aov.out)
plot(TukeyHSD(aov.out))
getwd()
teachtime <- read.table("teaching_time.txt")
head(teachtime)
teachtime <- read.table("teaching_time.txt",header = TRUe)
teachtime <- read.table("teaching_time.txt",header = TRUE)
head(teachtime)
list.files()
list.files()
teaching_time <- read.table("teaching_time.txt",header = TRUE)
teaching_time <- read.table("teaching_time.txt",header = TRUE,sep = " ")
#반복이 잇는 이원분산 분석
str(ToothGrowth)
ToothGrowth$dose <- factor(ToothGrowth$dose)
str(ToothGrowth)
head(ToothGrowth)
aov.out <- aov(len ~supp +dose + supp:dose, data = ToothGrowth)
summary(aov.out)
aov.out
summary(aov.out)
##### 들어가기 전에..
# y 값 할당
y <- 10:50
# 할당된 값 확인
y
# 그냥 그려보자
plot(y)
# 실습에 배울 요소들 총합
y <- 1:5
plot(y, main="This is\nmain", sub="This is sub", xlab="This is xlab", ylab="This is ylab",
type="o", lwd=2, col="blue", pch=24, bg="yellow", cex=1.5)
##### 1) plot type : type
par( mfrow=c(3, 3) )
plot(y, type='p', main="type='p'" )
plot(y, type='l', main="type='l'" )
plot(y, type='b', main="type='b'" )
plot(y, type='c', main="type='c'" )
plot(y, type='o', main="type='o'" )
plot(y, type='h', main="type='h'" )
plot(y, type='s', main="type='s'" )
plot(y, type='S', main="type='S'" )
plot(y, type='n', main="type='n'" )
# 실습에 배울 요소들 총합
y <- 1:5
plot(y, type='p', main="type='p'" )
plot(y, type='l', main="type='l'" )
plot(y, type='b', main="type='b'" )
plot(y, type='c', main="type='c'" )
plot(y, type='o', main="type='o'" )
plot(y, type='h', main="type='h'" )
plot(y, type='s', main="type='s'" )
plot(y, type='S', main="type='S'" )
plot(y, type='n', main="type='n'" )
##### 2) line type : lty
# graphics.off()
par( mfrow=c(2, 3) )
plot(y, type='o', lty=1, main=paste("lty=",1, sep='') )
plot(y, type='o', lty=2, main=paste("lty=",2, sep='') )
plot(y, type='o', lty=3, main=paste("lty=",3, sep='') )
plot(y, type='o', lty=4, main=paste("lty=",4, sep='') )
plot(y, type='o', lty=5, main=paste("lty=",5, sep='') )
plot(y, type='o', lty=6, main=paste("lty=",6, sep='') )
for(i in 1:6)
plot(y, type='o', lty=i, main=paste("lty=",i, sep='') )
##### par(mfrow =), par(mfcol =)
graphics.off()
par( mfrow=c(2, 3) )
plot(y, type='o', lty=1, main=paste("lty=",1, sep='') )
plot(y, type='o', lty=2, main=paste("lty=",2, sep='') )
plot(y, type='o', lty=3, main=paste("lty=",3, sep='') )
plot(y, type='o', lty=4, main=paste("lty=",4, sep='') )
plot(y, type='o', lty=5, main=paste("lty=",5, sep='') )
plot(y, type='o', lty=6, main=paste("lty=",6, sep='') )
for(i in 1:6)
##### par(mfrow =), par(mfcol =)
graphics.off()
for(i in 1:6)
for(i in 1:6)
plot(y, type='o', lty=i, main=paste("lty=",i, sep='') )
##### par(mfrow =), par(mfcol =)
graphics.off()
par( mfrow=c(2, 3) )
plot(y, type='o', lty=1, main=paste("lty=",1, sep='') )
plot(y, type='o', lty=2, main=paste("lty=",2, sep='') )
plot(y, type='o', lty=3, main=paste("lty=",3, sep='') )
plot(y, type='o', lty=4, main=paste("lty=",4, sep='') )
plot(y, type='o', lty=5, main=paste("lty=",5, sep='') )
plot(y, type='o', lty=6, main=paste("lty=",6, sep='') )
graphics.off()
par( mfcol=c(2, 3) )
plot(y, type='o', lty=1, main=paste("lty=",1, sep='') )
plot(y, type='o', lty=2, main=paste("lty=",2, sep='') )
plot(y, type='o', lty=3, main=paste("lty=",3, sep='') )
plot(y, type='o', lty=4, main=paste("lty=",4, sep='') )
plot(y, type='o', lty=5, main=paste("lty=",5, sep='') )
plot(y, type='o', lty=6, main=paste("lty=",6, sep='') )
##### 4) plot character/symbol : pch
par( mfrow=c(3, 3) )
for ( i in 1:9 ) plot(y, type='o', pch=i, main=paste('pch=', i, sep='') )
par(mfrow = c(1,2))
plot(y, type="o", col="blue")
plot(y, type="o", pch=23, col="red3", bg="slateblue3")
plot(y, type="o", pch=23, col="red", bg="blue3", col.axis = "cyan", col.main="blue2", main = "strange")
##### 번외 : color 지정 방법 4가지
par(mfrow = c(1,4))
# 1) 숫자 (0-8까지만 가능)
plot(y, col=6, cex = 2, pch = 19)
# 2) color name
plot(y, col="red", cex = 2, pch = 19)
# 3) 16진법 표기
plot(y, col="#a8259f", cex = 2, pch = 19)
# 4) RGB 표기
rgb <- rgb(168,37,159, maxColorValue=255)
plot(y, col=rgb, cex = 2, pch = 19)
# col에 변수를 할당해서 알록달록 그리기 (반복 색할당)
rgb <- c("red","green","blue")
plot(y, col=rgb, cex = 2, pch = 19)
# Dataset 만들기
cars <- data.frame(
standard=c(1, 3, 6, 4, 9),
truck=c(2, 5, 4, 5, 12),
suv=c(4, 4, 6, 6, 16) )
rownames(cars) <- c("Mon", "Tue", "Wed", "Thu", "Fri")
cars
# plot(cars)
# 차종별로 각각 그려보기
par( mfrow=c(1, 3) )
plot( cars$standard, type="o")
plot( cars$truck, type="o")
plot( cars$suv, type="o")
# 빈 plot부터 요소를 하나씩 그려보자
par( mfrow=c(1, 1) )
plot( cars$standard, type="o", col="blue", ylim=c(0, max_y), axes=FALSE, ann=FALSE )
plot( cars$standard, type="o", col="blue", ylim=c(0, max_y))
plot( cars$standard, type="o", col="blue", ylim=c(0, max_y), axes=FALSE)
plot( cars$standard, type="o", col="blue", ylim=c(0, max_y), axes=FALSE, ann=FALSE )
# 축을 그리자 : axis(), box() 함수
axis(1, at=1:5, lab=rownames(cars) )    # axis 1 x축 / 2 y축
max_y <- max(cars)
max_y
axis(2, at=seq(0, max_y, by=4), las=1 ) # las = 1 가로 / las = 2 세로
box()
# 선을 그리자 : lines() 함수
lines(cars$truck, type="o", pch=22, lty=2, col="red")
lines(cars$suv, type="o", pch=23, lty=3, col="green")
#범례 그리기 : legend() 함수
title(main="Car Rental", xlab="Weekday", ylab="The Number of Cars")
legend( "topleft", colnames(cars), col=c("blue", "red", "green"), pch=21:23, lty=1:3 )
##### 기타 범례 위치 지정
plot(1:10, type ="n", main = "LEGEND")
legend( "bottom", colnames(cars), col=c("blue", "red", "green"), pch=21:23, lty=1:3, title="bottom" )
legend( "bottomleft", colnames(cars), col=c("blue", "red", "green"), pch=21:23, lty=1:3, title="bottomleft" )
legend( "bottomright", colnames(cars), col=c("blue", "red", "green"), pch=21:23, lty=1:3, title="bottomright" )
legend( "left", colnames(cars), col=c("blue", "red", "green"), pch=21:23, lty=1:3, title = "left" )
# Dataset 만들기
cars <- data.frame(
standard=c(1, 3, 6, 4, 9),
truck=c(2, 5, 4, 5, 12),
suv=c(4, 4, 6, 6, 16) )
rownames(cars) <- c("Mon", "Tue", "Wed", "Thu", "Fri")
cars
# plot(cars)
# 차종별로 각각 그려보기
par( mfrow=c(1, 3) )
plot( cars$standard, type="o")
plot( cars$truck, type="o")
plot( cars$suv, type="o")
# 빈 plot부터 요소를 하나씩 그려보자
par( mfrow=c(1, 1) )
plot( cars$standard, type="o", col="blue", ylim=c(0, max_y), axes=FALSE, ann=FALSE )
plot( cars$standard, type="o", col="blue", ylim=c(0, max_y))
plot( cars$standard, type="o", col="blue", ylim=c(0, max_y), axes=FALSE)
plot( cars$standard, type="o", col="blue", ylim=c(0, max_y), axes=FALSE, ann=FALSE )
# 축을 그리자 : axis(), box() 함수
axis(1, at=1:5, lab=rownames(cars) )    # axis 1 x축 / 2 y축
max_y <- max(cars)
max_y
axis(2, at=seq(0, max_y, by=4), las=1 ) # las = 1 가로 / las = 2 세로
box()
# 선을 그리자 : lines() 함수
lines(cars$truck, type="o", pch=22, lty=2, col="red")
lines(cars$suv, type="o", pch=23, lty=3, col="green")
#범례 그리기 : legend() 함수
title(main="Car Rental", xlab="Weekday", ylab="The Number of Cars")
legend( "topleft", colnames(cars), col=c("blue", "red", "green"), pch=21:23, lty=1:3 )
##### 기타 범례 위치 지정
plot(1:10, type ="n", main = "LEGEND")
legend( "bottom", colnames(cars), col=c("blue", "red", "green"), pch=21:23, lty=1:3, title="bottom" )
legend( "bottomleft", colnames(cars), col=c("blue", "red", "green"), pch=21:23, lty=1:3, title="bottomleft" )
legend( "bottomright", colnames(cars), col=c("blue", "red", "green"), pch=21:23, lty=1:3, title="bottomright" )
legend( "left", colnames(cars), col=c("blue", "red", "green"), pch=21:23, lty=1:3, title = "left" )
legend( "right", colnames(cars), col=c("blue", "red", "green"), pch=21:23, lty=1:3, title = "right" )
legend( "top", colnames(cars), col=c("blue", "red", "green"), pch=21:23, lty=1:3, title = "top" )
legend( "topleft", colnames(cars), col=c("blue", "red", "green"), pch=21:23, lty=1:3, title = "topleft" )
legend( "topright", colnames(cars), col=c("blue", "red", "green"), pch=21:23, lty=1:3, title = "topright" )
legend( "center", colnames(cars), col=c("blue", "red", "green"), pch=21:23, lty=1:3, title = "center" )
### 좌표 입력
legend(7,8, legend=colnames(cars), col=c("blue", "red", "green"), pch=21:23, lty=1:3, title="(x,y)" )
# 마우스로 위치 찍어서 그리기
legend(locator(1), legend="Locator", fill = 1 ) # 상자 크기 text에 맞추기
